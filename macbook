package jpheads;

import robocode.*;
import robocode.util.Utils;
import java.awt.Color;

public class jpheads extends AdvancedRobot {
    private double enemyEnergy = 100.0;
    private boolean movingForward = true;

    public void run() {
        // Set the robot's colors
        setBodyColor(Color.RED);
        setGunColor(Color.BLACK);
        setRadarColor(Color.YELLOW);

        // Allow gun and radar to turn independently from the robot's movement
        setAdjustGunForRobotTurn(true);
        setAdjustRadarForGunTurn(true);

        // Initial movement
        setAhead(40000);
        movingForward = true;

        // Continuous radar sweep
        while (true) {
            setTurnRadarRight(Double.POSITIVE_INFINITY);
            execute();
        }
    }

    public void onScannedRobot(ScannedRobotEvent event) {
        double absoluteBearing = getHeadingRadians() + event.getBearingRadians();
        double bearingFromGun = Utils.normalRelativeAngle(absoluteBearing - getGunHeadingRadians());
        double bearingFromRadar = Utils.normalRelativeAngle(absoluteBearing - getRadarHeadingRadians());

        // Adaptive targeting
        double distance = event.getDistance();
        double bulletPower = Math.min(3.0, Math.max(0.1, 400 / distance));
        double bulletSpeed = 20 - 3 * bulletPower;
        long time = (long)(distance / bulletSpeed);

        // Calculate the future bearing
        double enemyX = distance * Math.sin(absoluteBearing);
        double enemyY = distance * Math.cos(absoluteBearing);
        double futureX = enemyX + event.getVelocity() * Math.sin(event.getHeadingRadians()) * time;
        double futureY = enemyY + event.getVelocity() * Math.cos(event.getHeadingRadians()) * time;
        double futureAbsoluteBearing = Utils.normalAbsoluteAngle(Math.atan2(futureX, futureY));

        setTurnGunRightRadians(Utils.normalRelativeAngle(futureAbsoluteBearing - getGunHeadingRadians()));
        if (getGunHeat() == 0 && Math.abs(bearingFromGun) <= Math.PI / 18) {
            setFire(bulletPower);
        }

        // Continuous radar lock
        setTurnRadarRightRadians(bearingFromRadar * 2);

        // Evasive movement
        double changeInEnergy = enemyEnergy - event.getEnergy();
        if (changeInEnergy > 0 && changeInEnergy <= 3) {
            if (movingForward) {
                setBack(40000);
                movingForward = false;
            } else {
                setAhead(40000);
                movingForward = true;
            }
        }
        enemyEnergy = event.getEnergy();
    }

    public void onHitByBullet(HitByBulletEvent event) {
        // Move perpendicularly to the bullet direction to avoid further hits
        if (movingForward) {
            setBack(100);
        } else {
            setAhead(100);
        }
        setTurnRight(Utils.normalRelativeAngleDegrees(90 - (getHeading() - event.getBearing())));
        execute();
    }

    public void onHitWall(HitWallEvent event) {
        // Move back when hitting a wall and change direction
        if (movingForward) {
            setBack(20);
            setTurnRight(45);
        } else {
            setAhead(20);
            setTurnRight(45);
        }
        execute();
    }

    public void onHitRobot(HitRobotEvent event) {
        // Move away from other robots
        if (event.isMyFault()) {
            if (movingForward) {
                setBack(50);
            } else {
                setAhead(50);
            }
        }
    }
}
