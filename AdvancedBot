package advancedrobot;

import robocode.AdvancedRobot;
import robocode.ScannedRobotEvent;
import robocode.HitByBulletEvent;
import robocode.HitWallEvent;

public class AdvancedRobotExample extends AdvancedRobot {

    private boolean movingForward;

    @Override
    public void run() {
        // Initialize robot settings
        setAdjustRadarForRobotTurn(true);
        setAdjustGunForRobotTurn(true);

        // Robot main loop
        while (true) {
            // Oscillate the radar
            setTurnRadarRight(360);
            execute();
        }
    }

    @Override
    public void onScannedRobot(ScannedRobotEvent event) {
        // Lock radar on target
        double absoluteBearing = getHeading() + event.getBearing();
        double bearingFromGun = normalRelativeAngleDegrees(absoluteBearing - getGunHeading());

        // Turn gun towards target
        if (Math.abs(bearingFromGun) <= 3) {
            setTurnGunRight(bearingFromGun);
            setFire(3);  // Fire with power 3
        } else {
            setTurnGunRight(bearingFromGun);
        }

        // Move towards or away from the target
        if (event.getDistance() > 150) {
            setAhead(event.getDistance() - 140);
            movingForward = true;
        } else {
            setBack(140 - event.getDistance());
            movingForward = false;
        }

        // Adjust radar
        setTurnRadarRight(normalRelativeAngleDegrees(absoluteBearing - getRadarHeading()));
    }

    @Override
    public void onHitByBullet(HitByBulletEvent event) {
        // Turn perpendicular to the bullet direction to evade
        if (movingForward) {
            setTurnRight(90 - event.getBearing());
        } else {
            setTurnLeft(90 - event.getBearing());
        }
        execute();
    }

    @Override
    public void onHitWall(HitWallEvent event) {
        // Reverse direction upon hitting a wall
        if (movingForward) {
            setBack(100);
            movingForward = false;
        } else {
            setAhead(100);
            movingForward = true;
        }
        execute();
    }

    // Utility method to normalize an angle to the range -180 to 180 degrees
    private double normalRelativeAngleDegrees(double angle) {
        double normalizedAngle = angle % 360;
        if (normalizedAngle > 180) {
            normalizedAngle -= 360;
        } else if (normalizedAngle < -180) {
            normalizedAngle += 360;
        }
        return normalizedAngle;
    }
}
